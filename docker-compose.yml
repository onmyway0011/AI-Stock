version: '3.8'
services:
  # AI量化交易系统主服务
  trading-system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-trading-system
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_PATH=/app/data/trading.db
      - REDIS_HOST=redis
      - LOG_LEVEL=info
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # PostgreSQL数据库（可选，用于更复杂的数据存储）
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_system"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Grafana监控面板
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - trading-network
    depends_on:
      - prometheus

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - trading-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - trading-system
      - grafana
    restart: unless-stopped
    networks:
      - trading-network
  # 开发环境配置
  trading-system-dev:
    <<: *development
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ai-trading-system-dev
    ports:
      - "3000:3000"
      - "3001:3001"
      - "9229:9229"  # Node.js调试端口
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
      - ./data:/app/data
      - ./logs:/app/logs
    command: npm run dev
    networks:
      - trading-network

# 网络配置
networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local

# 开发环境配置
x-development: &development
  image: node:14
  working_dir: /app
  networks:
    - trading-network